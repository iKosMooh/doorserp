generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Condominium {
  id                    String                  @id @default(cuid())
  name                  String
  cnpj                  String?                 @unique
  address               String
  city                  String
  state                 String
  zipCode               String                  @map("zip_code")
  phone                 String?
  email                 String?
  adminContact          String?                 @map("admin_contact")
  totalUnits            Int                     @default(0) @map("total_units")
  isActive              Boolean                 @default(true) @map("is_active")
  subscriptionPlan      SubscriptionPlan        @default(BASIC) @map("subscription_plan")
  subscriptionExpiresAt DateTime?               @map("subscription_expires_at")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  accessLogs            AccessLog[]
  arduinoConfigurations ArduinoConfiguration[]
  employees             Employee[]
  financialAccounts     FinancialAccount[]
  financialCategories   FinancialCategory[]
  financialEntries      FinancialEntry[]
  guests                Guest[]
  residents             Resident[]
  securityAlerts        SecurityAlert[]
  units                 Unit[]
  userAccess            UserCondominiumAccess[]

  @@map("condominiums")
}

model User {
  id                       String                  @id @default(cuid())
  email                    String                  @unique
  password                 String
  username                 String?                 @unique
  name                     String
  photo                    String?
  phone                    String?
  document                 String?
  documentType             DocumentType            @default(CPF) @map("document_type")
  birthDate                DateTime?               @map("birth_date")
  faceRecognitionFolder    String?                 @map("face_recognition_folder")
  faceRecognitionEnabled   Boolean                 @default(false) @map("face_recognition_enabled")
  faceModelsCount          Int                     @default(0) @map("face_models_count")
  lastFaceTraining         DateTime?               @map("last_face_training")
  isActive                 Boolean                 @default(true) @map("is_active")
  isSuperAdmin             Boolean                 @default(false) @map("is_super_admin")
  isAdmin                  Boolean                 @default(false) @map("is_admin")
  mustChangePassword       Boolean                 @default(false) @map("must_change_password")
  lastLogin                DateTime?               @map("last_login")
  createdAt                DateTime                @default(now()) @map("created_at")
  updatedAt                DateTime                @updatedAt @map("updated_at")
  accessLogs               AccessLog[]
  employees                Employee[]
  financialEntriesApproved FinancialEntry[]        @relation("FinancialEntryApprovedBy")
  financialEntriesCreated  FinancialEntry[]        @relation("FinancialEntryCreatedBy")
  residents                Resident[]
  alertsResolved           SecurityAlert[]         @relation("AlertResolvedBy")
  alertsTriggered          SecurityAlert[]         @relation("AlertTriggeredBy")
  sessions                 Session[]
  accessGranted            UserCondominiumAccess[] @relation("AccessGrantedBy")
  condominiumAccess        UserCondominiumAccess[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model UserCondominiumAccess {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  condominiumId String      @map("condominium_id")
  accessLevel   AccessLevel @map("access_level")
  isActive      Boolean     @default(true) @map("is_active")
  grantedAt     DateTime    @default(now()) @map("granted_at")
  expiresAt     DateTime?   @map("expires_at")
  grantedBy     String?     @map("granted_by")
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  grantedByUser User?       @relation("AccessGrantedBy", fields: [grantedBy], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, condominiumId])
  @@index([condominiumId], map: "user_condominium_access_condominium_id_fkey")
  @@index([grantedBy], map: "user_condominium_access_granted_by_fkey")
  @@map("user_condominium_access")
}

model ArduinoConfiguration {
  id                String          @id @default(cuid())
  condominiumId     String          @map("condominium_id")
  deviceName        String          @map("device_name")
  deviceCode        String          @unique @map("device_code")
  code              String?         @db.Text
  wifiSsid          String?         @map("wifi_ssid")
  wifiPassword      String?         @map("wifi_password")
  connectionPort    String          @default("COM4") @map("connection_port")
  baudRate          Int             @default(9600) @map("baud_rate")
  deviceLocation    String?         @map("device_location")
  deviceType        DeviceType      @default(MAIN_GATE) @map("device_type")
  pinConfigurations String?         @map("pin_configurations") @db.LongText
  commandMapping    String?         @map("command_mapping") @db.LongText
  isOnline          Boolean         @default(false) @map("is_online")
  lastPing          DateTime?       @map("last_ping")
  firmwareVersion   String?         @map("firmware_version")
  installationDate  DateTime        @default(now()) @map("installation_date")
  isActive          Boolean         @default(true) @map("is_active")
  notes             String?
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  accessLogs        AccessLog[]
  condominium       Condominium     @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  securityAlerts    SecurityAlert[]

  @@unique([condominiumId, deviceLocation])
  @@map("arduino_configurations")
}

model Unit {
  id               String           @id @default(cuid())
  condominiumId    String           @map("condominium_id")
  block            String
  number           String
  floor            Int?
  area             Decimal?         @db.Decimal(8, 2)
  bedrooms         Int?
  bathrooms        Int?
  parkingSpaces    Int              @default(0) @map("parking_spaces")
  unitType         UnitType         @default(APARTMENT) @map("unit_type")
  monthlyFee       Decimal          @default(0.00) @map("monthly_fee") @db.Decimal(10, 2)
  isOccupied       Boolean          @default(false) @map("is_occupied")
  isActive         Boolean          @default(true) @map("is_active")
  notes            String?
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  financialEntries FinancialEntry[]
  residents        Resident[]
  condominium      Condominium      @relation(fields: [condominiumId], references: [id], onDelete: Cascade)

  @@unique([condominiumId, block, number])
  @@map("units")
}

model Resident {
  id                String           @id @default(cuid())
  userId            String           @map("user_id")
  unitId            String           @map("unit_id")
  condominiumId     String           @map("condominium_id")
  relationshipType  RelationshipType @default(OWNER) @map("relationship_type")
  emergencyContact  String?          @map("emergency_contact")
  vehiclePlates     String?          @map("vehicle_plates") @db.LongText
  accessPermissions String?          @map("access_permissions") @db.LongText
  moveInDate        DateTime         @default(now()) @map("move_in_date")
  moveOutDate       DateTime?        @map("move_out_date")
  isActive          Boolean          @default(true) @map("is_active")
  notes             String?
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  financialEntries  FinancialEntry[]
  guests            Guest[]
  condominium       Condominium      @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  unit              Unit             @relation(fields: [unitId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, unitId])
  @@index([condominiumId], map: "residents_condominium_id_fkey")
  @@index([unitId], map: "residents_unit_id_fkey")
  @@map("residents")
}

model Employee {
  id               String      @id @default(cuid())
  userId           String      @map("user_id")
  condominiumId    String      @map("condominium_id")
  employeeCode     String      @map("employee_code")
  position         String
  department       String?
  accessCardId     String?     @unique @map("access_card_id")
  salary           Decimal?    @db.Decimal(10, 2)
  commissionRate   Decimal     @default(0.00) @map("commission_rate") @db.Decimal(5, 2)
  workSchedule     String?     @map("work_schedule") @db.LongText
  permissions      String?     @db.LongText
  hireDate         DateTime    @default(now()) @map("hire_date")
  terminationDate  DateTime?   @map("termination_date")
  isActive         Boolean     @default(true) @map("is_active")
  supervisorId     String?     @map("supervisor_id")
  notes            String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  condominium      Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  supervisor       Employee?   @relation("EmployeeSupervisor", fields: [supervisorId], references: [id])
  subordinates     Employee[]  @relation("EmployeeSupervisor")
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestsAuthorized Guest[]

  @@unique([condominiumId, employeeCode])
  @@unique([userId, condominiumId])
  @@index([supervisorId], map: "employees_supervisor_id_fkey")
  @@map("employees")
}

model Guest {
  id                     String      @id @default(cuid())
  name                   String
  document               String?
  phone                  String?
  condominiumId          String      @map("condominium_id")
  invitedByResidentId    String      @map("invited_by_resident_id")
  invitedByEmployeeId    String?     @map("invited_by_employee_id")
  visitPurpose           String?     @map("visit_purpose")
  vehiclePlate           String?     @map("vehicle_plate")
  accessCode             String?     @map("access_code")
  validFrom              DateTime    @default(now()) @map("valid_from")
  validUntil             DateTime?   @map("valid_until")
  accessDurationMinutes  Int         @default(60) @map("access_duration_minutes")
  autoExpire             Boolean     @default(true) @map("auto_expire")
  maxEntries             Int         @default(1) @map("max_entries")
  currentEntries         Int         @default(0) @map("current_entries")
  authorizedLocations    String?     @map("authorized_locations") @db.LongText
  visitorPhoto           String?     @map("visitor_photo")
  faceRecognitionFolder  String?     @map("face_recognition_folder")
  faceRecognitionEnabled Boolean     @default(false) @map("face_recognition_enabled")
  notificationSent       Boolean     @default(false) @map("notification_sent")
  lastAccessAttempt      DateTime?   @map("last_access_attempt")
  isActive               Boolean     @default(true) @map("is_active")
  notes                  String?
  createdAt              DateTime    @default(now()) @map("created_at")
  updatedAt              DateTime    @updatedAt @map("updated_at")
  accessLogs             AccessLog[]
  condominium            Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  invitedByEmployee      Employee?   @relation(fields: [invitedByEmployeeId], references: [id])
  invitedByResident      Resident    @relation(fields: [invitedByResidentId], references: [id], onDelete: Cascade)

  @@index([condominiumId], map: "guests_condominium_id_fkey")
  @@index([invitedByEmployeeId], map: "guests_invited_by_employee_id_fkey")
  @@index([invitedByResidentId], map: "guests_invited_by_resident_id_fkey")
  @@map("guests")
}

model AccessLog {
  id                 String                @id @default(cuid())
  condominiumId      String                @map("condominium_id")
  arduinoId          String?               @map("arduino_id")
  timestamp          DateTime              @default(now())
  accessType         AccessType            @map("access_type")
  accessMethod       AccessMethod          @map("access_method")
  status             AccessStatus          @default(APPROVED)
  userId             String?               @map("user_id")
  guestId            String?               @map("guest_id")
  entryExit          EntryExit             @map("entry_exit")
  location           String?
  arduinoCommandSent String?               @map("arduino_command_sent")
  responseTimeMs     Int?                  @map("response_time_ms")
  vehiclePlate       String?               @map("vehicle_plate")
  photoEvidence      String?               @map("photo_evidence")
  additionalData     String?               @map("additional_data") @db.LongText
  denialReason       String?               @map("denial_reason")
  authorizedBy       String?               @map("authorized_by")
  notes              String?
  arduino            ArduinoConfiguration? @relation(fields: [arduinoId], references: [id])
  condominium        Condominium           @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  guest              Guest?                @relation(fields: [guestId], references: [id])
  user               User?                 @relation(fields: [userId], references: [id])

  @@index([arduinoId], map: "access_logs_arduino_id_fkey")
  @@index([condominiumId], map: "access_logs_condominium_id_fkey")
  @@index([guestId], map: "access_logs_guest_id_fkey")
  @@index([userId], map: "access_logs_user_id_fkey")
  @@map("access_logs")
}

model SecurityAlert {
  id              String                @id @default(cuid())
  condominiumId   String                @map("condominium_id")
  arduinoId       String?               @map("arduino_id")
  alertType       AlertType             @map("alert_type")
  severity        AlertSeverity         @default(MEDIUM)
  title           String
  description     String?
  triggeredBy     String?               @map("triggered_by")
  location        String?
  isResolved      Boolean               @default(false) @map("is_resolved")
  resolvedBy      String?               @map("resolved_by")
  resolvedAt      DateTime?             @map("resolved_at")
  resolutionNotes String?               @map("resolution_notes")
  additionalData  String?               @map("additional_data") @db.LongText
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  arduino         ArduinoConfiguration? @relation(fields: [arduinoId], references: [id])
  condominium     Condominium           @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  resolvedByUser  User?                 @relation("AlertResolvedBy", fields: [resolvedBy], references: [id])
  triggeredByUser User?                 @relation("AlertTriggeredBy", fields: [triggeredBy], references: [id])

  @@index([arduinoId], map: "security_alerts_arduino_id_fkey")
  @@index([condominiumId], map: "security_alerts_condominium_id_fkey")
  @@index([resolvedBy], map: "security_alerts_resolved_by_fkey")
  @@index([triggeredBy], map: "security_alerts_triggered_by_fkey")
  @@map("security_alerts")
}

model FinancialCategory {
  id               String              @id @default(cuid())
  condominiumId    String              @map("condominium_id")
  name             String
  description      String?
  type             TransactionType
  isDefault        Boolean             @default(false) @map("is_default")
  parentCategoryId String?             @map("parent_category_id")
  isActive         Boolean             @default(true) @map("is_active")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  condominium      Condominium         @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  parentCategory   FinancialCategory?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories    FinancialCategory[] @relation("CategoryHierarchy")
  financialEntries FinancialEntry[]

  @@unique([condominiumId, name])
  @@index([parentCategoryId], map: "financial_categories_parent_category_id_fkey")
  @@map("financial_categories")
}

model FinancialAccount {
  id               String           @id @default(cuid())
  condominiumId    String           @map("condominium_id")
  accountName      String           @map("account_name")
  accountType      AccountType      @default(CHECKING) @map("account_type")
  bankName         String?          @map("bank_name")
  accountNumber    String?          @map("account_number")
  agency           String?
  currentBalance   Decimal          @default(0.00) @map("current_balance") @db.Decimal(15, 2)
  isActive         Boolean          @default(true) @map("is_active")
  notes            String?
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  condominium      Condominium      @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  financialEntries FinancialEntry[]

  @@index([condominiumId], map: "financial_accounts_condominium_id_fkey")
  @@map("financial_accounts")
}

model FinancialEntry {
  id                String             @id @default(cuid())
  condominiumId     String             @map("condominium_id")
  accountId         String             @map("account_id")
  categoryId        String             @map("category_id")
  transactionDate   DateTime           @default(now()) @map("transaction_date")
  dueDate           DateTime?          @map("due_date")
  description       String
  amount            Decimal            @db.Decimal(15, 2)
  type              TransactionType
  status            PaymentStatus      @default(PENDING)
  paidAmount        Decimal            @default(0.00) @map("paid_amount") @db.Decimal(15, 2)
  paidDate          DateTime?          @map("paid_date")
  paymentMethod     PaymentMethod?     @map("payment_method")
  residentId        String?            @map("resident_id")
  unitId            String?            @map("unit_id")
  supplierVendor    String?            @map("supplier_vendor")
  documentNumber    String?            @map("document_number")
  referenceMonth    String?            @map("reference_month")
  isRecurring       Boolean            @default(false) @map("is_recurring")
  recurrencePattern RecurrencePattern? @map("recurrence_pattern")
  parentEntryId     String?            @map("parent_entry_id")
  createdBy         String             @map("created_by")
  approvedBy        String?            @map("approved_by")
  approvalDate      DateTime?          @map("approval_date")
  additionalData    String?            @map("additional_data") @db.LongText
  notes             String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  account           FinancialAccount   @relation(fields: [accountId], references: [id])
  approvedByUser    User?              @relation("FinancialEntryApprovedBy", fields: [approvedBy], references: [id])
  category          FinancialCategory  @relation(fields: [categoryId], references: [id])
  condominium       Condominium        @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  createdByUser     User               @relation("FinancialEntryCreatedBy", fields: [createdBy], references: [id])
  parentEntry       FinancialEntry?    @relation("RecurringEntries", fields: [parentEntryId], references: [id])
  childEntries      FinancialEntry[]   @relation("RecurringEntries")
  resident          Resident?          @relation(fields: [residentId], references: [id])
  unit              Unit?              @relation(fields: [unitId], references: [id])

  @@index([accountId], map: "financial_entries_account_id_fkey")
  @@index([approvedBy], map: "financial_entries_approved_by_fkey")
  @@index([categoryId], map: "financial_entries_category_id_fkey")
  @@index([condominiumId], map: "financial_entries_condominium_id_fkey")
  @@index([createdBy], map: "financial_entries_created_by_fkey")
  @@index([parentEntryId], map: "financial_entries_parent_entry_id_fkey")
  @@index([residentId], map: "financial_entries_resident_id_fkey")
  @@index([unitId], map: "financial_entries_unit_id_fkey")
  @@map("financial_entries")
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum DocumentType {
  CPF
  RG
  CNH
  PASSPORT
}

enum AccessLevel {
  RESIDENT
  EMPLOYEE
  ADMIN
  VISITOR
}

enum DeviceType {
  MAIN_GATE
  GARAGE
  PEDESTRIAN
  EMERGENCY
}

enum UnitType {
  APARTMENT
  HOUSE
  COMMERCIAL
  STORAGE
}

enum RelationshipType {
  OWNER
  TENANT
  FAMILY_MEMBER
  AUTHORIZED
}

enum AccessType {
  RESIDENT
  EMPLOYEE
  GUEST
  UNKNOWN
  EMERGENCY
}

enum AccessMethod {
  FACIAL_RECOGNITION
  ACCESS_CARD
  ACCESS_CODE
  MANUAL
  EMERGENCY
}

enum AccessStatus {
  APPROVED
  REJECTED
  PENDING
  FORCED
}

enum EntryExit {
  ENTRY
  EXIT
}

enum AlertType {
  UNAUTHORIZED_ACCESS
  FORCED_ENTRY
  SYSTEM_OFFLINE
  SUSPICIOUS_ACTIVITY
  EMERGENCY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIAL
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  CHECK
}

enum AccountType {
  CHECKING
  SAVINGS
  CASH
  CREDIT_CARD
  INVESTMENT
}

enum RecurrencePattern {
  MONTHLY
  QUARTERLY
  YEARLY
}
